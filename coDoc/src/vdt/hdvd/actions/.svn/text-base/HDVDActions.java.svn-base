package vdt.hdvd.actions;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

import org.eclipse.core.resources.IProject;
import org.eclipse.jface.action.Action;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import vdt.hdvd.Activator;
import vdt.hdvd.Logging.ProcessLogFactory;
import vdt.hdvd.dialogs.CancelDialog;
import vdt.hdvd.dialogs.FileChooser;
import vdt.hdvd.fs.FS;
import vdt.hdvd.global.ConsoleWriter;
import vdt.hdvd.global.Global;
import vdt.hdvd.process.ExitCodeWaiter;
import vdt.hdvd.process.Launcher;
import vdt.hdvd.process.StreamReader;
import vdt.hdvd.project.support.HDVDProjectManager;
import vdt.hdvd.project.support.HDVDWorkspace;
import vdt.hdvd.qemu.Qemu;
import vdt.hdvd.qemu.QemuFactory;
import vdt.hdvd.qemu.QemuSource;
import vdt.hdvd.views.QemuLogView;

public class HDVDActions
{
	public static void compileQEMU()
	{
		ConsoleWriter.clear();
		ConsoleWriter.show();
		
		IProject currentProject = HDVDWorkspace.getActiveProject();
		if(null == currentProject) {
			ConsoleWriter.printWarning("Please open a project first!\n");
			return;
		}
		
		String project_name = currentProject.getName();
        String project_path = currentProject.getLocation().toOSString();
        
        Qemu qemu = Global.qemuProcess.get(project_name);
        QemuSource qs = QemuFactory.create_qemu_source(project_path + "/sw_design")
                .config_stdout(ProcessLogFactory.create_ConsoleWriter_writer())
                .config_stderr(ProcessLogFactory.create_ConsoleWriter_writer())
                .make_stdout(ProcessLogFactory.create_ConsoleWriter_writer())
                .make_stderr(ProcessLogFactory.create_ConsoleWriter_writer())
                .executor(Global.executor);
        try {
            ConsoleWriter.println("Building Qemu source...");
            qs.include_hw_device(project_name);
            FutureTask<Qemu> task = qs.build(Global.executor);

            Global.executor.execute(
                    new CancelDialog<Qemu>("Building Qemu Source",
                            "Compiling the Qemu Source, please wait...",
                            task));

            Qemu tqemu = task.get();
            if (null != tqemu) {
                if (null != qemu) {
                    tqemu.select_image(qemu.image_path());
                }
                ConsoleWriter.println("Qemu source build completed.");
                Global.qemuProcess.put(project_name, tqemu);
                return;
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ExecutionException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (CancellationException e) {
            ConsoleWriter.println("Qemu source build canceled.");
        }
        ConsoleWriter.println("Qemu source build failed.");
	}
	
	public static Action BuildQEMU = new Action() {
		public void run()
		{
			HDVDActions.compileQEMU();
		}
	};
	
	public static Action CompileVerilog = new Action() {
		public void run()
		{
			ConsoleWriter.clear();
			ConsoleWriter.show();
			
			IProject currentProject = HDVDWorkspace.getActiveProject();
			if(null == currentProject) {
				ConsoleWriter.printWarning("Please open a project first!\n");
				return;
			}
			
	        String project_path = currentProject.getLocation().toOSString();
	        
	        StreamReader vlib_pw_stdout = 
	                ProcessLogFactory.create_ConsoleWriter_writer();
	        StreamReader vlib_pw_stderr = ProcessLogFactory.create_stderr();
			try {
			    String vlib_command = "vlib " + project_path + "/hw_design/work";
			    Launcher vlib_launcher = Launcher.create_launcher(vlib_command);
			    vlib_launcher.launch(vlib_pw_stdout,
			    						vlib_pw_stderr,
			    						Global.executor,
			    						false);
	            FutureTask<Integer> task =
	                    new FutureTask<Integer>(vlib_launcher.process_waiter());
	            Global.executor.execute(task);
	            Global.executor.execute(new ExitCodeWaiter(task, "vlib failed"));
			} catch (IOException e) {
				e.printStackTrace();
				ConsoleWriter.println(
				        "Failed to execute vlib work. Make sure the library has been created.");
				return;
			}
			
			Global.executor.execute(vlib_pw_stdout);
			Global.executor.execute(vlib_pw_stderr);
			
	    	File hwPath = new File(project_path + "/hw_design");
	    	
	    	if(!hwPath.exists())
	    		return;
	    	
	    	List<String> lfs = FS.list_files(project_path + "/hw_design", true);
	    	String[] files = lfs.toArray(new String[lfs.size()]);
			
	    	for(String f : files)
	    	{
	    		if(f.endsWith(".v"))
	    		{
	    			String command = "vlog " + f.replaceFirst(project_path + "/hw_design/", "");
	    	        StreamReader verilog_pw_stdout = 
	    	                ProcessLogFactory.create_ConsoleWriter_writer();
	    	        StreamReader verilog_pw_stderr = ProcessLogFactory.create_ConsoleWriter_writer();
	    	        int ret = 0;
	    			try {
	    			    Launcher verilog_launcher = Launcher.create_launcher(command, hwPath);
	    			    verilog_launcher.launch(verilog_pw_stdout,
	    			    						verilog_pw_stderr,
	    			    						Global.executor,
	    			    						false);
	    	            FutureTask<Integer> task =
	    	                    new FutureTask<Integer>(verilog_launcher.process_waiter());
	    	            Global.executor.execute(task);
	    	            ret = task.get();
	    			} catch (IOException e) {
	    				e.printStackTrace();
	    				ConsoleWriter.println(
	    				        "Failed to compile verilog. Make sure there is no error with verilog.");
	    				return;
	    			} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						return;
					} catch (ExecutionException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						return;
					}
	    			Global.executor.execute(verilog_pw_stdout);
	    			Global.executor.execute(verilog_pw_stderr);
    	            if(ret != 0)
    	            	break;
	    		}
	    	}
		}
	};

	public static Action SelectQEMUImage = new Action() {
		public void run()
		{
	        File f = FileChooser.getFile();

	        if(f == null)
	            return;

	        IProject currentProject = HDVDWorkspace.getActiveProject();
	        if (null == currentProject) {
	            return;
	        }

	        String project_name = currentProject.getName();
	        String project_path = currentProject.getLocation().toOSString();
	        Qemu qemu = Global.qemuProcess.get(project_name);

	        if (null == qemu) {
	            QemuSource qs =
	                    QemuFactory.create_qemu_source(project_path + "/src");
	            qemu = QemuFactory.create_qemu(qs.binary_path());
	        }

	        HDVDProjectManager.writeProjectProperty(project_name, "qemu_image",
	                                               f.getAbsolutePath());
	        qemu.select_image(f.getAbsolutePath());
	        Global.qemuProcess.put(project_name, qemu);
		}
	};

	public static Action LaunchQEMU = new Action() {
		public void run()
		{
			ConsoleWriter.clear();
			ConsoleWriter.show();

			IProject currentProject = HDVDWorkspace.getActiveProject();
			if (null == currentProject) {
			    return;
			}
			String project_path = currentProject.getLocation().toOSString();
			String project_name = currentProject.getName();

	        String para = HDVDProjectManager.readProjectProperty(project_name,
	                                                            "qemu_params");
	        if(null == para) {
	            para = "-boot c -m 512";
	            HDVDProjectManager.writeProjectProperty(project_name,
	                                                   "qemu_params", para);
	        }

			Qemu qemu = Global.qemuProcess.get(currentProject.getName());

			if (null == qemu) {
	            QemuSource qs =
	                    QemuFactory.create_qemu_source(project_path + "/sw_design");
	            qemu = QemuFactory.create_qemu(qs.binary_path());

			    if (null == qemu) {
			        return;
			    }
			}

	        if (qemu.image_path().length() == 0) {
	            String image_path =
	                    HDVDProjectManager.readProjectProperty(project_name,
	                                                          "qemu_image");
	            if (null != image_path) qemu.select_image(image_path);
	        }
	        
	        Global.qemuProcess.put(currentProject.getName(), qemu);

	        StreamReader qemu_pw_stdout = 
	                ProcessLogFactory.create_QemuLogView_writer();
	        StreamReader qemu_pw_stderr = ProcessLogFactory.create_stderr();
			try {
			    //qemuProcess.start(para);
			    Launcher qemu_launcher = qemu.launcher(para);
			    qemu_launcher.launch(qemu_pw_stdout,
			                         qemu_pw_stderr,
			                         Global.executor,
			                         false);
	            FutureTask<Integer> task =
	                    new FutureTask<Integer>(qemu_launcher.process_waiter());
	            Global.executor.execute(task);
	            Global.executor.execute(new ExitCodeWaiter(task, "Qemu Stopped"));
			} catch (IOException e) {
				e.printStackTrace();
				ConsoleWriter.clear();
				ConsoleWriter.show();
				ConsoleWriter.println(
				        "Failed to start Qemu. Make sure it has been built.");
				return;
			}
			
			try {
				PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(QemuLogView.QemuLogViewID);
			} catch (PartInitException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			QemuLogView.getInstance().Clear();
			Global.executor.execute(qemu_pw_stdout);
			Global.executor.execute(qemu_pw_stderr);
			
			LaunchQEMU.setEnabled(false);
			LaunchVNC.setEnabled(true);
			LaunchModelsim.setEnabled(false);
			StopSimulation.setEnabled(true);
		}
	};

	public static Action LaunchVNC = new Action() {
		public void run()
		{
			String vnccmd = "vncviewer localhost";
			String[] cmdArray = {"/bin/sh", "-c", vnccmd};
			try {
				Runtime.getRuntime().exec(cmdArray);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	};
	
	public static Action LaunchModelsim = new Action() {
		public void run()
		{
			ConsoleWriter.clear();
			ConsoleWriter.show();

			IProject currentProject = HDVDWorkspace.getActiveProject();
			if (null == currentProject) {
			    return;
			}
			String project_path = currentProject.getLocation().toOSString();

	    	File hwPath = new File(project_path + "/hw_design");

	    	StreamReader modelsim_pw_stdout = 
	                ProcessLogFactory.create_ConsoleWriter_writer();
	        StreamReader modelsim_pw_stderr = ProcessLogFactory.create_ConsoleWriter_writer();
			try {
			    Launcher modelsim_launcher = Launcher.create_launcher("xterm -e vsim -L unisim -L simprim -pli libvpi_interface.so hdvd_tb", hwPath);
			    modelsim_launcher.launch(modelsim_pw_stdout,
			    					 modelsim_pw_stderr,
			                         Global.executor,
			                         false);
	            FutureTask<Integer> task =
	                    new FutureTask<Integer>(modelsim_launcher.process_waiter());
	            Global.executor.execute(task);
	            Global.executor.execute(new ExitCodeWaiter(task, "Modelsim Stopped"));
			} catch (IOException e) {
				e.printStackTrace();
				ConsoleWriter.println(
				        "Failed to start Modelsim. Make sure the configuration is correct.");
				return;
			}
			
			Global.executor.execute(modelsim_pw_stdout);
			Global.executor.execute(modelsim_pw_stderr);
			
			LaunchQEMU.setEnabled(true);
			LaunchVNC.setEnabled(false);
			LaunchModelsim.setEnabled(false);
			StopSimulation.setEnabled(true);
		}
	};

	public static Action StopSimulation = new Action() {
		public void run()
		{
			IProject currentProject = HDVDWorkspace.getActiveProject();
			Qemu qemu = null;
			if (null != currentProject &&
				null != 
					(qemu = Global.qemuProcess.get(currentProject.getName()))
				) 
			{
				qemu.stop();
			}	
			LaunchQEMU.setEnabled(false);
			LaunchVNC.setEnabled(false);
			LaunchModelsim.setEnabled(true);
			StopSimulation.setEnabled(false);
		}
	};

	static
	{
		BuildQEMU.setEnabled(true);
		BuildQEMU.setText("Build QEMU Source");
		BuildQEMU.setToolTipText("Build QEMU Source");
		BuildQEMU.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/build_qemu.jpg"));

		LaunchQEMU.setEnabled(false);
		LaunchQEMU.setText("Launch QEMU");
		LaunchQEMU.setToolTipText("Launch QEMU");
		LaunchQEMU.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/launch_qemu.gif"));

		LaunchVNC.setEnabled(false);
		LaunchVNC.setText("Launch VNC");
		LaunchVNC.setToolTipText("Launch VNC");
		LaunchVNC.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/launch_vnc.gif"));
		
		SelectQEMUImage.setEnabled(true);
		SelectQEMUImage.setText("Select QEMU Disk Image");
		SelectQEMUImage.setToolTipText("Select QEMU Disk Image");
		SelectQEMUImage.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/select_qemu_image.jpg"));

		CompileVerilog.setEnabled(true);
		CompileVerilog.setText("Compile Verilog Source");
		CompileVerilog.setToolTipText("Compile Verilog Source");
		CompileVerilog.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/build_exec.gif"));

		LaunchModelsim.setEnabled(true);
		LaunchModelsim.setText("Launch Modelsim");
		LaunchModelsim.setToolTipText("Launch Modelsim");
		LaunchModelsim.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/launch_modelsim.gif"));

		StopSimulation.setEnabled(false);
		StopSimulation.setText("Stop Simulation");
		StopSimulation.setToolTipText("Stop Simulation");
		StopSimulation.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(Activator.PLUGIN_ID, "/icons/stop.gif"));
	}
}